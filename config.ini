[general]
# whether to use balanced train/test data test_classifiers, gen_unwanted_cache, gen_corpora
use_balanced_data = True

[test_classifiers]
# how many top common words to take from each corpus to construct features (excluding bigrams)
features_top_n_common_words = 100

# whether to include additional 10 most common bigrams to features of each corpus
features_include_top10_bigrams = True

# params for supported classifiers
k_neighbors_kwargs = {
    "n_neighbors": 5, "weights": "uniform", "algorithm": "auto", "leaf_size": 30,
    "p": 2, "metric": "minkowski", "metric_params": None, "n_jobs": None
                     }

decision_tree_kwargs = {
    "criterion": "gini", "splitter": "best", "max_depth": None, "min_samples_split": 2,
    "min_samples_leaf": 1, "min_weight_fraction_leaf": 0.0, "max_features": None,
    "random_state": None, "max_leaf_nodes": None, "min_impurity_decrease": 0.0,
    "class_weight": None, "ccp_alpha": 0.0
                       }

random_forest_kwargs = {
    "n_estimators": 100, "criterion": "gini", "max_depth": None, "min_samples_split": 2,
    "min_samples_leaf": 1, "min_weight_fraction_leaf": 0.0, "max_features": "sqrt",
    "max_leaf_nodes": None, "min_impurity_decrease": 0.0, "bootstrap": True, "oob_score": False,
    "n_jobs": None, "random_state": None, "verbose": 0, "warm_start": False, "class_weight": None,
    "ccp_alpha": 0.0, "max_samples": None
                       }

logistic_regression_kwargs = {
    "penalty": "l2", "dual": False, "tol": 1e-4, "C": 1.0, "fit_intercept": True,
    "intercept_scaling": 1, "class_weight": None, "random_state": None, "solver": "lbfgs",
    "max_iter": 100, "multi_class": "auto", "verbose": 0, "warm_start": False, "n_jobs": None,
    "l1_ratio": None
                             }

mlp_kwargs = {
    "hidden_layer_sizes": (100,), "activation": "relu", "solver": "adam", "alpha": 0.0001,
    "batch_size": "auto", "learning_rate": "constant", "learning_rate_init": 0.001, "power_t": 0.5,
    "max_iter": 200, "shuffle": True, "random_state": None, "tol": 1e-4, "verbose": False,
    "warm_start": False, "momentum": 0.9, "nesterovs_momentum": True, "early_stopping": False,
    "validation_fraction": 0.1, "beta_1": 0.9, "beta_2": 0.999, "epsilon": 1e-8, "n_iter_no_change": 10,
    "max_fun": 15000
             }

ada_boost_kwargs = {
    "estimator": None, "n_estimators": 50, "learning_rate": 1.0, "algorithm": "SAMME.R",
    "random_state": None, "base_estimator": "deprecated"
                   }



[scrapping]
# base url with reviews to be formatted using format method
reviews_url = "https://www.amazon.de/product-reviews/{product_id}/ref=cm_cr_arp_d_paging_btm_next_2?ie=UTF8&reviewerType=all_reviews&pageNumber={page_number}"

# ranges for "NEGATIVE", "NEUTRAL", "POSITIVE" sentiments;
# e.g. for [0.0-5.0] star system:   "NEGATIVE": [0.0, 3.0)     "NEUTRAL": [3.0, 4.0)      "POSITIVE": [4.0, 5.0]
sentiment_ranges = ((0.0, 3.0), (3.0, 4.0), (4.0, 5.0))

[products]
color_washing_powder = (
                       "B08WQRDSRQ", "B07PXZXVLJ", "B004DNU370", "B0144LTHKY", "B09LMKMGXF", "B0B3JKGYHM",
                       "B082VNZYW2", "B003TFFYT0", "B01BHU126M", "B07B6HR79V", "B00BONV0BK", "B07LC8V35K",
                       "B091VDYF86", "B08WQQRKCH", "B08X7YF9YM", "B004DNVFKY", "B08WQRHZJW", "B08X7XXP16",
                       "B078XY2LPL", "B07PRDR4XZ", "B006POLA0Y"
                       )


dishwasher_tablets = (
                     "B08GKZHC37", "B07K7315M4", "B09PYLZSQX", "B08WK4F2W8", "B09HV4V2NM", "B08X5CK7DK",
                     "B09XXVK68Z", "B09KLZYY36", "B09PYP9L4T", "B01E5K5IXY", "B00I9VSEF0", "B07VKPZT69",
                     "B0725XMG4D", "B095WSYD9L", "B01E5K5IZM", "B09HV58YR5", "B0859H3N42", "B00HXDQUUQ",
                     "B01N5JGIAY", "B08G4NZLKV", "B08W9TZYNH", "B09QQSJVTQ", "B01A6WDQY8", "B09RHHS5S1",
                     "B00HXUB4ZK", "B085L33CVN", "B0919FSSNQ", "B071ZGKJTM", "B074P44B6C", "B07ZBJH445",
                     "B075ZQ5SC9", "B07X6M3RXF", "B08G4JJDDF", "B09CZ2LSTQ", "B07W7VTFL8", "B00GX3XAUK",
                     "B07BK41D65", "B09PC166BQ", "B09C6CJZ55", "B07MGMCZN3",)



thermal_mug = (
              "B081TR57TK", "B00VE3I2UW", "B08Z7HXSQM", "B06XRGNM2F", "B0792S8YK7", "B07TN8SXSP",
              "B07HXVS24V", "B07TRG2FNP", "B08914BZFY", "B07SDM8VFK", "B09NT6XXZ9", "B07X2SG4VD",
              "B07QJZDJ9B", "B07TRVQ6GC", "B06XRZRPCY", "B07GVXGR7N", "B018M4WCP6", "B08PHG6ZX4",
              "B09J8DS7GL", "B08TM74232", "B09CDTH7BV", "B07TYZZS89", "B09TXP1TP3", "B081HWBLDY",
              "B08NK8DJ3Q", "B07QH2LSX6", "B0BB2PGPQY", "B08GM8FV74", "B01IF4YX7S", "B0831F3TK6",
              "B095KHGQKT", "B08GM82WZX", "B08JG42TB9", "B09QRLBDV1", "B09MB5S1FK", "B0BFXJKD74",
              "B07X517CQ9", "B0BG4HKFZH", "B0B7P3RQ3T", "B07TPCKMF3", "B09M4BS3BH", "B08THHY91N",
              "B095HZGWTR", "B09J5CLST3", "B0B51QTFQW", "B09TT64CV5", "B09P6D5Q6L", "B09GJYPKWV",
              "B06W9FWFF6", "B0BFQKTTB5", "B0BLZ15HD6", "B08GMYF31P", "B099Z4WGR8", "B098XQPFMG",
              "B08DP74JXL", "B0949NRF3Z", "B09XHZXPK6", "B08ZNBSPV1",
              )

[bert]
# weights for categorical crossentropy loss [positive_weight, neutral_weight, negative_weight]
weights = [1.0, 1.0, 1.0]
train_dataset = "./csv_data/train.csv"
test_dataset = "./csv_data/test.csv"
num_labels = 3
epochs = 1
batch_size = 16
learning_rate = 5e-5
model_name = "base"